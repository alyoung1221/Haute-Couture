@model Project1.Models.Product

@{
    ViewBag.Title = "Edit " + Model.ProductName;
}

<h2>@ViewBag.Title</h2>
<hr />

@using (Html.BeginForm("Edit", "Products", FormMethod.Post, new { enctype = "multipart/form-data", @name = "edit" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ProductID)

        <div class="form-group">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                @Html.Hidden("Path", @Html.DisplayFor(model => model.ProductName).ToString().ToLower().Replace(" ", "-"))
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="numberWrapper" id="dollarInput">
                    <span>$</span>
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @type = "number", @min = 1, @step = .01, @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OnSale, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OnSale)
                @Html.ValidationMessageFor(model => model.OnSale, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group novisible">
            @Html.Label("Sale", "Sale Duration", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    if (Model.SaleStart != null && Model.SaleEnd != null)
                    {
                        @Html.Editor("Sale", new { htmlAttributes = new { @class = "form-control existingSale", @Value = Model.SaleStart?.ToString("MM-dd-yyyy") + " to " + Model.SaleEnd?.ToString("MM-dd-yyyy"), @placeholder = DateTime.Today.ToString("MMMM dd, yyyy") + " to " + DateTime.Now.AddDays(7).ToString("MMMM dd, yyyy") } })
                    }
                    else if (Model.OnSale == false || String.IsNullOrEmpty(Request["Sale"]) || Request["Sale"] == " to " || Request["Sale"].IndexOf(" to ") == -1)
                    {
                        @Html.Editor("Sale", new { htmlAttributes = new { @class = "form-control newSale", @placeholder = DateTime.Today.ToString("MMMM dd, yyyy") + " to " + DateTime.Now.AddDays(7).ToString("MMMM dd, yyyy") } })
                    }
                    else
                    {
                        var date = Request["Sale"];
                        var saleStart = DateTime.Parse(date.Substring(0, date.IndexOf("to")));
                        var saleEnd = DateTime.Parse(date.Substring(date.IndexOf("to") + 3));
                        @Html.Editor("Sale", new { htmlAttributes = new { @class = "form-control existingSale", @Value = saleStart.ToString("MM-dd-yyyy") + " to " + saleEnd.ToString("MM-dd-yyyy"), @placeholder = DateTime.Today.ToString("MMMM dd, yyyy") + " to " + DateTime.Now.AddDays(7).ToString("MMMM dd, yyyy") } })
                    }
                }
                @Html.ValidationMessage("Sale", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group novisible">
            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="numberWrapper" id="percentInput">
                    @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @min = 1, @placeholder = "25", @class = "form-control" } })
                    <span>%</span>
                </div>
                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 image">
                @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @type = "file", @accept = "image/*" } })
                <span>
                    @(String.IsNullOrEmpty(Model.Image) ? "No file selected" : Model.Image)
                </span>
                @Html.Hidden("HiddenImage", @Html.DisplayFor(model => model.Image))
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                <img src="@(Url.Content(Constants.ImagePath) + Html.DisplayFor(model => model.Image))" id="preview" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" name="submit" value="Update" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div>
    <a href="@Url.Action("Details", new { id = Model.Path })">Return to product</a>
</div>